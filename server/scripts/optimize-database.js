#!/usr/bin/env node

/**
 * Script d'optimisation de la base de donn√©es
 * 
 * Ce script :
 * 1. Cr√©e les vues SQL optimis√©es
 * 2. Ajoute les index manquants
 * 3. Analyse les performances
 * 4. Optimise les requ√™tes lentes
 */

const { Pool } = require('pg');
const fs = require('fs');
const path = require('path');

// Configuration de la base de donn√©es
const pool = new Pool({
  host: process.env.DB_HOST || 'dpg-d2jnela4d50c73891omg-a.frankfurt-postgres.render.com',
  port: process.env.DB_PORT || 5432,
  database: process.env.DB_NAME || 'eterna',
  user: process.env.DB_USER || 'eterna_user',
  password: process.env.DB_PASSWORD || 'u5K6UbCBstAUIXvuIEqlaC7ZyHUor79G',
  ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : false
});

class DatabaseOptimizer {
  constructor() {
    this.optimizations = [];
    this.performanceMetrics = {};
  }

  /**
   * Ex√©cute une requ√™te et mesure les performances
   */
  async executeWithMetrics(query, params = []) {
    const startTime = Date.now();
    const client = await pool.connect();
    
    try {
      const result = await client.query(query, params);
      const executionTime = Date.now() - startTime;
      
      this.performanceMetrics[query.substring(0, 50)] = {
        executionTime,
        rowCount: result.rowCount,
        timestamp: new Date().toISOString()
      };
      
      return result;
    } finally {
      client.release();
    }
  }

  /**
   * Cr√©e les vues SQL optimis√©es
   */
  async createOptimizedViews() {
    console.log('üìä Cr√©ation des vues SQL optimis√©es...');
    
    try {
      const viewsPath = path.join(__dirname, '..', 'database-views.sql');
      const viewsSQL = fs.readFileSync(viewsPath, 'utf8');
      
      await this.executeWithMetrics(viewsSQL);
      console.log('‚úÖ Vues cr√©√©es avec succ√®s');
      
      this.optimizations.push('Vues SQL optimis√©es cr√©√©es');
    } catch (error) {
      console.error('‚ùå Erreur lors de la cr√©ation des vues:', error.message);
      throw error;
    }
  }

  /**
   * Ajoute des index manquants pour les performances
   */
  async addPerformanceIndexes() {
    console.log('üîç Ajout d\'index de performance...');
    
    const indexes = [
      // Index composites pour les requ√™tes fr√©quentes
      'CREATE INDEX IF NOT EXISTS idx_characters_user_level ON characters(user_id, level)',
      'CREATE INDEX IF NOT EXISTS idx_character_inventory_character_equipped ON character_inventory(character_id, equipped)',
      'CREATE INDEX IF NOT EXISTS idx_items_type_rarity_level ON items(type_id, rarity_id, level_requirement)',
      'CREATE INDEX IF NOT EXISTS idx_enemies_type_level ON enemies(type, level)',
      'CREATE INDEX IF NOT EXISTS idx_guild_members_guild_rank ON guild_members(guild_id, rank)',
      
      // Index partiels pour les requ√™tes sp√©cifiques
      'CREATE INDEX IF NOT EXISTS idx_characters_high_level ON characters(level) WHERE level > 50',
      'CREATE INDEX IF NOT EXISTS idx_character_inventory_equipped_items ON character_inventory(character_id) WHERE equipped = true',
      'CREATE INDEX IF NOT EXISTS idx_items_rare_items ON items(rarity_id) WHERE rarity_id > 3',
      
      // Index pour les recherches textuelles
      'CREATE INDEX IF NOT EXISTS idx_items_name_trgm ON items USING gin(name gin_trgm_ops)',
      'CREATE INDEX IF NOT EXISTS idx_characters_name_trgm ON characters USING gin(name gin_trgm_ops)',
      
      // Index pour les requ√™tes JSONB
      'CREATE INDEX IF NOT EXISTS idx_characters_stats_gin ON characters USING gin(stats)',
      'CREATE INDEX IF NOT EXISTS idx_items_base_stats_gin ON items USING gin(base_stats)',
      'CREATE INDEX IF NOT EXISTS idx_items_effects_gin ON items USING gin(effects)',
      
      // Index pour les timestamps
      'CREATE INDEX IF NOT EXISTS idx_characters_updated_at ON characters(updated_at)',
      'CREATE INDEX IF NOT EXISTS idx_guild_members_last_active ON guild_members(last_active)',
      'CREATE INDEX IF NOT EXISTS idx_character_inventory_created_at ON character_inventory(created_at)'
    ];

    for (const indexSQL of indexes) {
      try {
        await this.executeWithMetrics(indexSQL);
        console.log(`   ‚úÖ Index cr√©√©: ${indexSQL.split(' ')[5] || 'composite'}`);
      } catch (error) {
        if (!error.message.includes('already exists')) {
          console.warn(`   ‚ö†Ô∏è Erreur index: ${error.message}`);
        }
      }
    }

    this.optimizations.push('Index de performance ajout√©s');
  }

  /**
   * Analyse les performances de la base de donn√©es
   */
  async analyzePerformance() {
    console.log('üìà Analyse des performances...');
    
    const analysisQueries = [
      {
        name: 'Requ√™tes lentes',
        query: `
          SELECT query, mean_time, calls, total_time
          FROM pg_stat_statements 
          WHERE mean_time > 1000 
          ORDER BY mean_time DESC 
          LIMIT 10
        `
      },
      {
        name: 'Tables les plus utilis√©es',
        query: `
          SELECT schemaname, tablename, n_tup_ins, n_tup_upd, n_tup_del, n_live_tup
          FROM pg_stat_user_tables 
          ORDER BY n_live_tup DESC 
          LIMIT 10
        `
      },
      {
        name: 'Index non utilis√©s',
        query: `
          SELECT schemaname, tablename, indexname, idx_tup_read, idx_tup_fetch
          FROM pg_stat_user_indexes 
          WHERE idx_tup_read = 0 AND idx_tup_fetch = 0
          ORDER BY schemaname, tablename
        `
      },
      {
        name: 'Taille des tables',
        query: `
          SELECT 
            schemaname,
            tablename,
            pg_size_pretty(pg_total_relation_size(schemaname||'.'||tablename)) as size,
            pg_total_relation_size(schemaname||'.'||tablename) as size_bytes
          FROM pg_tables 
          WHERE schemaname = 'public'
          ORDER BY pg_total_relation_size(schemaname||'.'||tablename) DESC
        `
      }
    ];

    for (const analysis of analysisQueries) {
      try {
        const result = await this.executeWithMetrics(analysis.query);
        console.log(`\nüìä ${analysis.name}:`);
        console.table(result.rows);
      } catch (error) {
        console.warn(`   ‚ö†Ô∏è Analyse ${analysis.name} √©chou√©e: ${error.message}`);
      }
    }
  }

  /**
   * Optimise les requ√™tes en cr√©ant des statistiques
   */
  async updateStatistics() {
    console.log('üìä Mise √† jour des statistiques...');
    
    const tables = [
      'characters', 'character_inventory', 'items', 'item_types', 'rarities',
      'guilds', 'guild_members', 'dungeons', 'enemies', 'quests', 'skills'
    ];

    for (const table of tables) {
      try {
        await this.executeWithMetrics(`ANALYZE ${table}`);
        console.log(`   ‚úÖ Statistiques mises √† jour pour ${table}`);
      } catch (error) {
        console.warn(`   ‚ö†Ô∏è Erreur ANALYZE ${table}: ${error.message}`);
      }
    }

    this.optimizations.push('Statistiques mises √† jour');
  }

  /**
   * V√©rifie l'int√©grit√© des donn√©es
   */
  async checkDataIntegrity() {
    console.log('üîç V√©rification de l\'int√©grit√© des donn√©es...');
    
    const integrityChecks = [
      {
        name: 'Personnages orphelins',
        query: 'SELECT COUNT(*) FROM characters c LEFT JOIN users u ON c.user_id = u.id WHERE u.id IS NULL'
      },
      {
        name: 'Objets d\'inventaire orphelins',
        query: 'SELECT COUNT(*) FROM character_inventory ci LEFT JOIN characters c ON ci.character_id = c.id WHERE c.id IS NULL'
      },
      {
        name: 'Objets avec types invalides',
        query: 'SELECT COUNT(*) FROM items i LEFT JOIN item_types it ON i.type_id = it.id WHERE it.id IS NULL'
      },
      {
        name: 'Objets avec raret√©s invalides',
        query: 'SELECT COUNT(*) FROM items i LEFT JOIN rarities r ON i.rarity_id = r.id WHERE r.id IS NULL'
      }
    ];

    for (const check of integrityChecks) {
      try {
        const result = await this.executeWithMetrics(check.query);
        const count = parseInt(result.rows[0].count);
        
        if (count > 0) {
          console.warn(`   ‚ö†Ô∏è ${check.name}: ${count} enregistrements probl√©matiques`);
        } else {
          console.log(`   ‚úÖ ${check.name}: OK`);
        }
      } catch (error) {
        console.warn(`   ‚ö†Ô∏è V√©rification ${check.name} √©chou√©e: ${error.message}`);
      }
    }
  }

  /**
   * G√©n√®re un rapport d'optimisation
   */
  generateReport() {
    console.log('\nüìã RAPPORT D\'OPTIMISATION');
    console.log('='.repeat(50));
    
    console.log('\n‚úÖ Optimisations appliqu√©es:');
    this.optimizations.forEach((opt, index) => {
      console.log(`   ${index + 1}. ${opt}`);
    });

    console.log('\nüìä M√©triques de performance:');
    Object.entries(this.performanceMetrics).forEach(([query, metrics]) => {
      console.log(`   ${query}: ${metrics.executionTime}ms (${metrics.rowCount} lignes)`);
    });

    console.log('\nüí° Recommandations:');
    console.log('   1. Surveiller les requ√™tes lentes avec pg_stat_statements');
    console.log('   2. V√©rifier r√©guli√®rement l\'utilisation des index');
    console.log('   3. Nettoyer les donn√©es anciennes si n√©cessaire');
    console.log('   4. Configurer le monitoring des performances');
    console.log('   5. Utiliser le cache Redis pour les donn√©es statiques');
  }

  /**
   * Ex√©cute toutes les optimisations
   */
  async optimize() {
    try {
      console.log('üöÄ D√©but de l\'optimisation de la base de donn√©es...\n');
      
      // V√©rifier la connexion
      await this.executeWithMetrics('SELECT NOW()');
      console.log('‚úÖ Connexion √† la base de donn√©es √©tablie\n');
      
      // Ex√©cuter les optimisations
      await this.createOptimizedViews();
      await this.addPerformanceIndexes();
      await this.updateStatistics();
      await this.checkDataIntegrity();
      await this.analyzePerformance();
      
      // G√©n√©rer le rapport
      this.generateReport();
      
      console.log('\nüéâ Optimisation termin√©e avec succ√®s !');
      
    } catch (error) {
      console.error('üí• Erreur lors de l\'optimisation:', error);
      throw error;
    } finally {
      await pool.end();
    }
  }
}

// Ex√©cuter l'optimisation si le script est appel√© directement
if (require.main === module) {
  const optimizer = new DatabaseOptimizer();
  
  optimizer.optimize()
    .then(() => {
      console.log('\nüèÅ Script termin√©');
      process.exit(0);
    })
    .catch((error) => {
      console.error('\nüí• Script √©chou√©:', error);
      process.exit(1);
    });
}

module.exports = DatabaseOptimizer;

