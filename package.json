{
  "name": "rpg-dungeon-api",
  "version": "1.0.0",
  "description": "API RPG Dungeon avec fonctionnalités avancées et sécurité renforcée",
  "main": "server/server.js",
  "scripts": {
    "start": "concurrently \"npm run start:server\" \"npm run start:client\"",
    "start:server": "cd server && npm start",
    "start:client": "cd client && npm start",
    "dev": "concurrently \"npm run dev:server\" \"npm run dev:client\"",
    "dev:server": "cd server && npm run dev",
    "dev:client": "cd client && npm start",
    "build": "npm run build:client",
    "build:client": "cd client && npm run build",
    "configure:render": "node configure-render.js",
    "install:all": "npm install && cd server && npm install && cd ../client && npm install",
    "setup:env": "node deploy_improved.js",
    "db:init": "cd server && node initDB.js",
    "db:seed": "cd server && node seed-data.js",
    "deploy:production": "NODE_ENV=production node deploy_improved.js",
    "deploy:staging": "NODE_ENV=staging node deploy_improved.js",
    "monitor": "cd server && node -e \"const { performanceMonitor } = require('./utils/monitoring'); setInterval(() => console.log(JSON.stringify(performanceMonitor.getSummary(), null, 2)), 5000);\"",
    "health": "curl -s http://localhost:3001/api/health | jq .",
    "metrics": "curl -s http://localhost:3001/api/metrics | jq .",
    "clean": "rm -rf node_modules server/node_modules client/node_modules client/build",
    "reset": "npm run clean && npm run install:all && npm run db:init",
    "backup": "cd server && pg_dump $DATABASE_URL > backup_$(date +%Y%m%d_%H%M%S).sql",
    "restore": "cd server && psql $DATABASE_URL < backup_*.sql",
    "lint": "cd server && npm run lint && cd ../client && npm run lint",
    "format": "cd server && npm run format && cd ../client && npm run format",
    "security:audit": "npm audit && cd server && npm audit && cd ../client && npm audit",
    "security:fix": "npm audit fix && cd server && npm audit fix && cd ../client && npm audit fix",
    "pm2:start": "pm2 start ecosystem.config.js",
    "pm2:stop": "pm2 stop ecosystem.config.js",
    "pm2:restart": "pm2 restart ecosystem.config.js",
    "pm2:logs": "pm2 logs",
    "pm2:monit": "pm2 monit",
    "nginx:reload": "sudo nginx -s reload",
    "nginx:test": "sudo nginx -t",
    "update": "git pull && npm run install:all && npm run build",
    "version:patch": "npm version patch && git push --tags",
    "version:minor": "npm version minor && git push --tags",
    "version:major": "npm version major && git push --tags"
  },
  "keywords": [
    "rpg",
    "game",
    "api",
    "nodejs",
    "express",
    "react",
    "postgresql",
    "jwt",
    "security",
    "monitoring",
    "testing"
  ],
  "author": "RPG Dungeon Team",
  "license": "MIT",
  "dependencies": {
    "axios": "^1.11.0",
    "chalk": "^4.1.2",
    "commander": "^11.1.0",
    "concurrently": "^8.2.2",
    "cross-env": "^7.0.3",
    "dotenv": "^16.3.1",
    "fs-extra": "^11.1.1",
    "inquirer": "^8.2.6",
    "node-fetch": "^3.3.2",
    "ora": "^5.4.1"
  },
  "devDependencies": {
    "artillery": "^2.0.0",
    "chai": "^4.3.10",
    "eslint": "^8.55.0",
    "faker": "^6.6.6",
    "husky": "^8.0.3",
    "jest": "^29.7.0",
    "k6": "^0.0.0",
    "lint-staged": "^15.2.0",
    "mocha": "^10.2.0",
    "nock": "^13.4.0",
    "nodemon": "^3.0.2",
    "nyc": "^15.1.0",
    "prettier": "^3.1.0",
    "sinon": "^17.0.1",
    "supertest": "^6.3.3"
  },
  "engines": {
    "node": ">=16.0.0",
    "npm": ">=8.0.0"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/your-username/rpg-dungeon-api.git"
  },
  "bugs": {
    "url": "https://github.com/your-username/rpg-dungeon-api/issues"
  },
  "homepage": "https://github.com/your-username/rpg-dungeon-api#readme",
  "husky": {
    "hooks": {
      "pre-commit": "lint-staged",
      "pre-push": "npm test"
    }
  },
  "lint-staged": {
    "*.{js,jsx,ts,tsx}": [
      "eslint --fix",
      "prettier --write"
    ],
    "*.{json,md,yml,yaml}": [
      "prettier --write"
    ]
  },
  "jest": {
    "testEnvironment": "node",
    "collectCoverage": true,
    "coverageDirectory": "coverage",
    "coverageReporters": [
      "text",
      "lcov",
      "html"
    ],
    "testMatch": [
      "**/__tests__/**/*.js",
      "**/?(*.)+(spec|test).js"
    ]
  },
  "nyc": {
    "reporter": [
      "text",
      "html"
    ],
    "exclude": [
      "coverage/**",
      "test/**",
      "**/*.test.js",
      "**/*.spec.js"
    ]
  }
}
